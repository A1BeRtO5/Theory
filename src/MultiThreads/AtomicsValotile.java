package MultiThreads;

import java.util.concurrent.atomic.AtomicBoolean;

public class AtomicsValotile {
    //    Атомарні операції (atomics) в Java - це механізм, який дозволяє виконувати операції
//        над змінними таким чином, щоб їхні зміни були атомарними, тобто неділимими для інших
//        потоків. Це дозволяє уникнути проблем з конкурентністю при роботі з потоками.

//    Atomic variables (Атомарні змінні):
//    -Класи AtomicInteger, AtomicLong, AtomicReference та інші забезпечують атомарні операції над значеннями без блокування всього об'єкта.
//    -Гарантують атомарність окремих операцій, таких як зчитування, запис і збільшення значення.
//    -Використовуються для забезпечення потокобезпечного доступу до змінних.

//    Ключове слово volatile:
//    -Вказує компілятору і операційній системі, що значення змінної може змінюватися в будь-який момент із зовнішнього контексту.
//    -Забезпечує потокобезпечний доступ до змінних без потреби синхронізації.
//    -Не забезпечує атомарність операцій.

//    Отже, ключове слово volatile використовується для позначення змінних, які можуть
//    бути прочитані та записані без блокування, але воно не забезпечує атомарність операцій.
//    Атомарні змінні, навпаки, забезпечують атомарність окремих операцій, але можуть вимагати
//    більш високих витрат на ресурси.\

//    valotile - зміює змінну і в кеші звідки взята і в рам памяті де записана
    public static void main(String[] args) {
    AtomicBoolean atomicBoolean  = new AtomicBoolean(false);//створюємо всі фолз
    atomicBoolean.set(true);// міняємо на тру
    atomicBoolean.get();// тепер всі будуть тру

    }
}
